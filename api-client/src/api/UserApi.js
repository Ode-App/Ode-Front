/**
 * OdeApp
 * REST API backend for OdeApp
 *
 * The version of the OpenAPI document: 1.0.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from '../ApiClient';
import User from '../model/User';

/**
* User service.
* @module api/UserApi
* @version 1.0.0
*/
export default class UserApi {
  /**
    * Constructs a new UserApi.
    * @alias module:api/UserApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }


  /**
     * Callback function to receive the result of the v1UserAuthenticatePost operation.
     * @callback module:api/UserApi~v1UserAuthenticatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

  /**
     * Authenticate user.
     * @param {module:model/User} user
     * @param {module:api/UserApi~v1UserAuthenticatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
  v1UserAuthenticatePost(user, callback) {
    const postBody = user;
    // verify the required parameter 'user' is set
    if (user === undefined || user === null) {
      throw new Error("Missing the required parameter 'user' when calling v1UserAuthenticatePost");
    }

    const pathParams = {
    };
    const queryParams = {
    };
    const headerParams = {
    };
    const formParams = {
    };

    const authNames = [];
    const contentTypes = ['application/json'];
    const accepts = [];
    const returnType = null;
    return this.apiClient.callApi(
      '/v1/user/authenticate', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null, callback,
    );
  }

  /**
     * Callback function to receive the result of the v1UserRegisterPost operation.
     * @callback module:api/UserApi~v1UserRegisterPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

  /**
     * Register user.
     * @param {module:model/User} user
     * @param {module:api/UserApi~v1UserRegisterPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
  static v1UserRegisterPost(user, callback) {
    const postBody = user;
    // verify the required parameter 'user' is set
    if (user === undefined || user === null) {
      throw new Error("Missing the required parameter 'user' when calling v1UserRegisterPost");
    }

    const pathParams = {
    };
    const queryParams = {
    };
    const headerParams = {
    };
    const formParams = {
    };

    const authNames = [];
    const contentTypes = ['application/json'];
    const accepts = [];
    const returnType = null;
    return this.apiClient.callApi(
      '/v1/user/register', 'POST',
      pathParams, queryParams, headerParams, formParams, postBody,
      authNames, contentTypes, accepts, returnType, null, callback,
    );
  }
}
